{"version":3,"sources":["App.js","components/PersonForm.js","utils/date.js","components/DeletePersonConfirm.js","components/PersonList.js","index.js"],"names":["Modal","setAppElement","App","apiPath","token","Buffer","from","toString","axiosConfig","headers","React","useState","modalIsOpen","setIsOpen","persons","setPersons","currentPerson","setCurrentPerson","openModal","closeModal","loadPersons","axios","get","then","res","data","className","onClick","type","deletePerson","personId","delete","isOpen","onRequestClose","style","content","top","left","right","bottom","marginRight","transform","savePerson","person","verb","id","catch","error","response","Object","assign","PersonForm","props","yup","mixed","default","required","date","string","email","schema","shape","notRequired","gender","nationality","placeOfBirth","name","birthDate","cpf","useForm","resolver","yupResolver","register","errors","handleSubmit","errorsFromBackEnd","setErrorsFromBackEnd","setPerson","handleChange","e","target","value","onSubmit","obj","keys","forEach","prop","message","method","htmlFor","defaultValue","onChange","maxLength","ref","autoComplete","max","Date","toISOString","split","formatDateToBrStandard","DeletePersonConfirm","role","aria-modal","aria-labelledby","xmlns","fill","viewBox","stroke","aria-hidden","strokeLinecap","strokeLinejoin","strokeWidth","d","PersonList","state","personToBeDeleted","setState","this","scope","map","src","alt","createdAt","toLocaleString","updatedAt","handleEditClick","handleDeleteClick","border","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.904e98a2.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport Modal from 'react-modal';\nimport PersonList from './components/PersonList';\nimport PersonForm from './components/PersonForm';\n\nModal.setAppElement('#root');\n\nconst App = () => {\n    const apiPath = 'http://localhost:8080/api/v1/persons';\n    const token = Buffer.from('admin:admins', 'utf8').toString('base64')\n    const axiosConfig = {headers: {'Authorization': `Basic ${token}`}};\n    const [modalIsOpen, setIsOpen] = React.useState(false);\n    const [persons, setPersons] = React.useState([]);\n    const [currentPerson, setCurrentPerson] = React.useState({});\n\n    const openModal = () => setIsOpen(true)\n    const closeModal = () => setIsOpen(false)\n\n    const loadPersons = () => {\n        axios.get(apiPath, axiosConfig)\n            .then(res => {\n                setPersons(res.data);\n                closeModal()\n            })\n    }\n\n    const deletePerson = (personId) => {\n        axios.delete(apiPath + '/' + personId, axiosConfig)\n            .then(res => {\n                loadPersons()\n            })\n    }\n\n    const savePerson = person => {\n        let verb = \"post\";\n        if (currentPerson.id) {\n            person.id = currentPerson.id\n            verb = \"put\";\n        }\n        return axios[verb](apiPath + (verb === 'put' ? '/' + currentPerson.id : ''), person, axiosConfig)\n            .then(res => {\n                loadPersons()\n                return []\n            })\n            .catch(function(error) {\n                if (error.response) {\n                    return Object.assign({}, error.response.data);\n                }\n            })\n    }\n\n    const handleCreateButton = () => {\n        setCurrentPerson({});\n        openModal();\n    }\n\n    return (\n        <div>\n            <nav className=\"bg-gray-800\">\n                <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n                    <div className=\"flex items-center justify-between h-16\">\n                        <div className=\"-mr-2 flex md:hidden\"></div>\n                    </div>\n                </div>\n            </nav>\n            <header className=\"bg-white shadow\">\n                <div className=\"max-w-10xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n                    <h1 className=\"text-3xl font-bold text-gray-900\">\n                        Cadastro de pessoas\n                    </h1>\n                </div>\n            </header>\n            <main>\n                <div className=\"max-w-10xl mx-auto py-6 sm:px-6 lg:px-8\">\n                    <div className=\"px-4 sm:px-0\">\n                        <button onClick={() => handleCreateButton() } type=\"button\" className=\"mb-4 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\n                            Criar\n                        </button>\n                        <PersonList\n                        persons={persons}\n                        setCurrentPerson={setCurrentPerson}\n                        openModal={openModal}\n                        loadPersons={loadPersons}\n                        deletePerson={deletePerson}\n                        />\n                    </div>\n                </div>\n                <Modal\n                    isOpen={modalIsOpen}\n                    onRequestClose={closeModal}\n                    style={{\n                        content: {\n                            top: '50%',\n                            left: '50%',\n                            right: 'auto',\n                            bottom: 'auto',\n                            marginRight: '-50%',\n                            transform: 'translate(-50%, -50%)'\n                        }\n                    }}\n                >\n                    <PersonForm savePerson={savePerson} person={currentPerson} closeModal={closeModal}/>\n                </Modal>\n            </main>\n        </div>\n    )\n}\n\nexport default App;","import React from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from \"yup\";\n\nconst PersonForm = (props) => {\n    yup.setLocale({\n        mixed: {\n            default: 'Não é válido',\n            required: 'Campo obrigatório',\n            date: 'Data inválida',\n        },\n        string: {\n            email: 'E-mail inválido'\n        }\n    });\n    const schema = yup.object().shape({\n        id: yup.number().notRequired(),\n        gender: yup.string().notRequired(),\n        nationality: yup.string().notRequired(),\n        placeOfBirth: yup.string().notRequired(),\n        name: yup.string().required(),\n        email: yup.string().email(),\n        birthDate: yup.string().required(),\n        cpf: yup.string().required()\n    });\n\n    const { register, errors, handleSubmit } = useForm({\n        resolver: yupResolver(schema)\n    });\n\n    const [errorsFromBackEnd, setErrorsFromBackEnd] = React.useState([]);\n    const onSubmit = data => {\n        let errorsFromRequest = props.savePerson(data);\n        errorsFromRequest.then(errors => {\n            let obj = {};\n            Object.keys(errors).forEach(function (prop) {\n                obj[prop] = { message: errors[prop]}\n                setErrorsFromBackEnd(obj)\n            })\n        })\n    }\n\n    const currentPerson = props.person;\n    const [person, setPerson] = React.useState(currentPerson);\n\n    const handleChange = e => {\n        const { name, value } = e.target;\n        setPerson({ ...person, [name]: value });\n    }\n\n    return (\n        <div className=\"mt-10 sm:mt-0\">\n            <div className=\"md:grid\">\n                <div className=\"mt-5 md:mt-0 md:col-span-2\">\n                    <form onSubmit={handleSubmit(onSubmit)} method=\"POST\">\n                        <div className=\"shadow overflow-hidden sm:rounded-md\">\n                            <div className=\"px-4 py-5 bg-white sm:p-6\">\n                                <div className=\"grid grid-cols-6 gap-6\">\n                                    <div className=\"col-span-6 sm:col-span-3\">\n                                        <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">Nome</label>\n                                        <input\n                                        defaultValue={currentPerson.name}\n                                        onChange={handleChange}\n                                        maxLength=\"255\"\n                                        type=\"text\"\n                                        name=\"name\"\n                                        id=\"name\"\n                                        ref={register}\n                                        autoComplete=\"given-name\"\n                                        className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\" />\n                                        <p className=\"text-red-500\">{errors.name?.message}</p>\n                                    </div>\n                                    <div className=\"col-span-6 sm:col-span-3\">\n                                        <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">E-mail</label>\n                                        <input\n                                        defaultValue={currentPerson.email}\n                                        onChange={handleChange}\n                                        maxLength=\"255\"\n                                        type=\"text\"\n                                        name=\"email\"\n                                        id=\"email\"\n                                        ref={register}\n                                        autoComplete=\"email\"\n                                        className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\" />\n                                        <p className=\"text-red-500\">{errors.email?.message}</p>\n                                    </div>\n                                    <div className=\"col-span-6 sm:col-span-3\">\n                                        <label htmlFor=\"gender\" className=\"block text-sm font-medium text-gray-700\">Sexo</label>\n                                        <select\n                                        defaultValue={currentPerson.gender}\n                                        onChange={handleChange}\n                                        id=\"gender\"\n                                        ref={register}\n                                        name=\"gender\"\n                                        autoComplete=\"gender\"\n                                        className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\">\n                                            <option value=\"\"></option>\n                                            <option value=\"F\">Feminino</option>\n                                            <option value=\"M\">Masculino</option>\n                                            <option value=\"NI\">Indefinido</option>\n                                        </select>\n                                    </div>\n                                    <div className=\"col-span-6 sm:col-span-3\">\n                                        <label htmlFor=\"birthDate\" className=\"block text-sm font-medium text-gray-700\">Data de nascimento</label>\n                                        <input\n                                            max={new Date().toISOString().split('T')[0]}\n                                        defaultValue={currentPerson.birthDate}\n                                        onChange={handleChange}\n                                        type=\"date\"\n                                        name=\"birthDate\"\n                                        id=\"birthDate\"\n                                        ref={register}\n                                        autoComplete=\"birthDate\"\n                                        className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\" />\n                                        <p className=\"text-red-500\">{errors.birthDate?.message}</p>\n                                        <p className=\"text-red-500\">{errorsFromBackEnd.birthDate?.message}</p>\n                                    </div>\n                                    <div className=\"col-span-6 sm:col-span-6 lg:col-span-3\">\n                                        <label htmlFor=\"placeOfBirth\" className=\"block text-sm font-medium text-gray-700\">Naturalidade</label>\n                                        <input\n                                        defaultValue={currentPerson.placeOfBirth}\n                                        onChange={handleChange}\n                                        maxLength=\"255\"\n                                        type=\"text\"\n                                        name=\"placeOfBirth\"\n                                        id=\"placeOfBirth\"\n                                        ref={register}\n                                        autoComplete=\"street-address\"\n                                        className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\" />\n                                    </div>\n\n                                    <div className=\"col-span-6 sm:col-span-6 lg:col-span-3\">\n                                        <label htmlFor=\"nationality\" className=\"block text-sm font-medium text-gray-700\">Nacionalidade</label>\n                                        <input\n                                        defaultValue={currentPerson.nationality}\n                                        onChange={handleChange}\n                                        maxLength=\"255\"\n                                        type=\"text\"\n                                        name=\"nationality\"\n                                        id=\"nationality\"\n                                        ref={register}\n                                        className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\" />\n                                    </div>\n\n                                    <div className=\"col-span-6 sm:col-span-3 lg:col-span-3\">\n                                        <label htmlFor=\"cpf\" className=\"block text-sm font-medium text-gray-700\">CPF</label>\n                                        <input\n                                        defaultValue={currentPerson.cpf}\n                                        onChange={handleChange}\n                                        maxLength=\"11\"\n                                        type=\"text\"\n                                        name=\"cpf\"\n                                        id=\"cpf\"\n                                        ref={register}\n                                        className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\" />\n                                        <p className=\"text-red-500\">{errors.cpf?.message}</p>\n                                        <p className=\"text-red-500\">{errorsFromBackEnd.cpf?.message}</p>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"px-4 py-3 bg-gray-50 text-right sm:px-6\">\n                                <button\n                                    onClick={() => props.closeModal()}\n                                    className=\"mb-4 mr-2 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500\">\n                                    Cancelar\n                                </button>\n                                <input value=\"Salvar\" type=\"submit\" className=\"cursor-pointer inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 cursor-default\" />\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PersonForm;","export const formatDateToBrStandard = (date) => {\n    let split = date.split('-');\n    return split[2] + '/' + split[1] + '/' + split[0];\n}","const DeletePersonConfirm = (props) => {\n    const handleDeleteClick = () => {\n        props.deletePerson(props.person.id);\n        props.closeModal();\n    }\n    return (\n        <div className=\" inline-block border align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\n            <div className=\"bg-white  px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n                <div className=\"sm:flex sm:items-start\">\n                    <div className=\"mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10\">\n                        <svg className=\"h-6 w-6 text-red-600\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n                        </svg>\n                    </div>\n                    <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                        <h3 className=\"text-lg leading-6 font-medium text-gray-900\" id=\"modal-headline\">\n                            Deletar: {props.person.name}?\n                        </h3>\n                        <div className=\"mt-2\">\n                            <p className=\"text-sm text-gray-500\">\n                                Essa ação não pode ser revetida</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n                <button type=\"button\" onClick={() => { handleDeleteClick() }} className=\"w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm\">\n                    Deletar\n                </button>\n                <button type=\"button\" onClick={() => { props.closeModal()}} className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\">\n                    Cancelar\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default DeletePersonConfirm","import React from 'react';\nimport { formatDateToBrStandard } from '../utils/date.js';\nimport DeletePersonConfirm from './DeletePersonConfirm';\nimport Modal from 'react-modal';\n\nexport default class PersonList extends React.Component {\n    state = {\n        modalIsOpen: false,\n        personToBeDeleted: {}\n    }\n\n    componentDidMount() {\n        this.props.loadPersons();\n    }\n\n    setIsOpen = (value) => {\n        this.setState({ modalIsOpen: value});\n    }\n\n    openModal = () => this.setIsOpen(true)\n    closeModal = () => this.setIsOpen(false)\n\n    handleEditClick(person) {\n        this.props.setCurrentPerson(person)\n        this.props.openModal()\n    }\n\n    handleDeleteClick(person) {\n        this.setState({ personToBeDeleted: person});\n        this.openModal();\n    }\n\n    render() {\n        return <div className=\"flex flex-col\">\n            <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n                <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n                    <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n                        <table className=\"min-w-full divide-y divide-gray-200\">\n                            <thead className=\"bg-gray-50\">\n                                <tr>\n                                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Nome\n                                    </th>\n                                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        E-mail\n                                    </th>\n                                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Sexo\n                                    </th>\n                                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Data de Nascimento\n                                    </th>\n                                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Naturalidade\n                                    </th>\n                                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Nacionalidade\n                                    </th>\n                                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        CPF\n                                    </th>\n                                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Data de criação\n                                    </th>\n                                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Última atualização\n                                    </th>\n                                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Ações\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody className=\"bg-white divide-y divide-gray-200\">\n                                {this.props.persons.map((person) => {\n                                    return <tr key={person.id}>\n                                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                                            <div className=\"flex items-center\">\n                                                <div className=\"flex-shrink-0 h-10 w-10\">\n                                                    <img className=\"h-10 w-10 rounded-full\" src=\"/default-user-image.webp\" alt=\"\" />\n                                                </div>\n                                                <div className=\"ml-4\">\n                                                    <div className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                                        {person.name}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                            {person.email}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                            {{ \"M\": \"Masculino\", \"F\": \"Feminino\", \"NI\": \"Indefinido\"}[person.gender]}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                            {formatDateToBrStandard(person.birthDate)}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                            {person.placeOfBirth}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                            {person.nationality}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                            {person.cpf}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                            {new Date(person.createdAt).toLocaleString(\"pt-BR\")}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                            {new Date(person.updatedAt).toLocaleString(\"pt-BR\")}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                            <button\n                                            onClick={() => this.handleEditClick(person)}\n                                            className=\"mb-4 mr-2 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\n                                                Editar\n                                            </button>\n                                            <button\n                                            onClick={() => this.handleDeleteClick(person)}\n                                            className=\"mb-4 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500\">\n                                                Deletar\n                                            </button>\n                                        </td>\n                                    </tr>\n                                })}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n            <Modal\n                isOpen={this.state.modalIsOpen}\n                onRequestClose={this.closeModal}\n                style={{\n                    content: {\n                        border: 0,\n                        top: '50%',\n                        left: '50%',\n                        right: 'auto',\n                        bottom: 'auto',\n                        marginRight: '-50%',\n                        transform: 'translate(-50%, -50%)'\n                    }\n                }}\n            >\n                <DeletePersonConfirm deletePerson={this.props.deletePerson} person={this.state.personToBeDeleted} closeModal={this.closeModal} />\n            </Modal>\n        </div>\n    };\n}","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n)"],"sourceRoot":""}